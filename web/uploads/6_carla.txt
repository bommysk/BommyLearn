import os
import sys
import re

"""Baby Names exercise

Define the extract_names() function below and change main()
to call it.

For writing regex, it's nice to include a copy of the target
text for inspiration.

Here's what the html looks like in the baby.html files:
...
<h3 align="center">Popularity in 1990</h3>
....
<tr align="right"><td>1</td><td>Michael</td><td>Jessica</td>
<tr align="right"><td>2</td><td>Christopher</td><td>Ashley</td>
<tr align="right"><td>3</td><td>Matthew</td><td>Brittany</td>
...

Suggested milestones for incremental development:
 -Extract the year and print it
 -Extract the names and rank numbers and just print them
 -Get the names data into a dict and print it
 -Build the [year, 'name rank', ... ] list and print it
 -Fix main() to use the extract_names list
"""

def extract_names(filename):
  """
  Given a file name for baby.html, returns a list starting with the year string
  followed by the name-rank strings in alphabetical order.
  ['2006', 'Aaliyah 91', Aaron 57', 'Abagail 895', ' ...]
  """

  data_array = []

  names_array = []

  year_match = re.search('\w+(\d{4})\.html', filename)

  year = year_match.group(1)

  data_array.append(year)

  f = open(filename, 'r')

  total_text = f.read()

  f.close()

  name_match = re.findall('<tr align="right"><td>\d+</td><td>\w+</td><td>\w+</td>', total_text)

  for match in name_match:
    group_match = re.search('<tr align="right"><td>(\d+)</td><td>(\w+)</td><td>(\w+)</td>', match)
    rank = group_match.group(1)
    male_name = group_match.group(2)
    female_name = group_match.group(3)

    names_array.append(male_name + " " + rank)
    names_array.append(female_name + " " + rank)

  names_array.sort()

  data_array.extend(names_array)
    
  return data_array

def main():
  # This command-line parsing code is provided.
  # Make a list of command line arguments, omitting the [0] element
  # which is the script itself.
  args = sys.argv[1:]

  if not args:
    print('usage: [--summaryfile] file [file ...]')
    sys.exit(1)

  # Notice the summary flag and remove it from args if it is present.
  summary = False
  if args[0] == '--summaryfile':
    summary = True
    del args[0]

  files_directory = args[0]

  # For each filename, get the names, then either print the text output
  # and write it to summaryfile
  for file_name in args:
    extracted_names = extract_names(file_name)

    file_name_match = re.search('//home/foaad/www/class/466/babynames/(\w+).html', file_name)

    file_name_extract = file_name_match.group(1)

    text = '\n'.join(extracted_names) + '\n'
    
    if summary:
      summary_file = open(file_name_extract + '.html.summary', 'w')
      summary_file.write(text)
      summary_file.close()
    else:
      print(text)
  
if __name__ == '__main__':
  main()

